---
# - name: create docker group
#   group:
#     name: "{{ docker_group }}"
#     system: yes
#     state: present

# - name: create docker user
#   user:
#     name: "{{ docker_user }}"
#     state: present
#     comment: "{{ docker_user }}"
#     group: "{{ docker_group }}"
#     shell: /sbin/nologin
#     createhome: no
#     system: yes

- block:
  - name: install packages
    apk:
      name: attr,bash,ca-certificates,rsync,tar,zip
      state: present
      update_cache: yes

  - name: import signing key
    get_url:
      url: https://raw.githubusercontent.com/sgerrand/alpine-pkg-glibc/master/sgerrand.rsa.pub
      dest: /etc/apk/keys/sgerrand.rsa.pub
      mode: 0440
    when: docker_glibc_environment

  - name: download glibc package
    get_url:
      url: "{{ alpine_glibc_package_url }}"
      dest: "/tmp/{{ alpine_glibc_package_file }}"
      mode: 0644
    when: docker_glibc_environment

  - name: install packages
    apk:
      name: build-base,musl-dev,git,make,gcc,g++,vim
      state: present
      update_cache: yes
    when: docker_build_environment

  - name: install glibc
    raw: "apk add /tmp/{{ glibc_package_url|basename }}"
    when: docker_glibc_environment

  - name: install alpine python packages
    apk:
      name: python-dev,py-pip,py-openssl
      state: latest
      update_cache: yes
  when: ansible_os_family in [ "Alpine" ]

- block:
  - name: remove docker repo
    file:
      path: /etc/apt/sources.list.d/docker.list
      state: absent
    ignore_errors: yes

  - name: install dependent packages
    apt:
      name: "{{ item }}"
      state: latest
      update_cache: yes
    with_items:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg2
      - software-properties-common
      - dirmngr
      - libffi-dev
      - python-dev
      - python-setuptools
      - libssl-dev
      - libxml2-dev
      - libxslt1-dev
      - libjpeg8-dev
      - zlib1g-dev

  - name: run apt update
    apt:
      update_cache: yes
      cache_valid_time: 3600
    when: ansible_distribution == 'Debian'
    register: apt_result
    until: apt_result is success
    retries: 3
    delay: 1
    ignore_errors: yes

  - name: retry if needed using command apt-get update
    command: apt-get update
    when: apt_result is failed

  - name: remove python-pip
    apt:
      name: python-pip
      state: absent
  when: ansible_os_family in [ "Debian" ]

- block:
  - name: remove old versions
    yum:
      name: "{{ item }}"
      state: absent
    with_items:
      - docker
      - docker-client
      - docker-client-latest
      - docker-common
      - docker-compose
      - docker-latest
      - docker-latest-logrotate
      - docker-logrotate
      - docker-selinux
      - docker-engine-selinux
      - docker-engine
      - python-requests
      - python2-acme
      - python-docker-py
      - python-urllib3

  - name: add dependencies
    yum:
      name:
        - rsync
      state: latest

  - name: remove python-pip
    yum:
      name: "{{ item }}"
      state: absent
    with_items:
      - python-pip
      - python-wheel
  when: ansible_os_family in [ "RedHat", "ClearOS"]

- name: check docker-compose version
  shell: pip show docker-compose | grep Version | cut -d" " -f2
  register: compose_check
  ignore_errors: yes

- name: check docker-compose latest
  set_fact:
    compose_latest: "{{ lookup('pypi_version', 'docker-compose') }}"

- name: remove old docker packages
  pip:
    name: docker,docker-py,docker-compose
    state: absent
  when: compose_check.stdout.find(compose_latest) == -1

- name: install prereq python packages
  pip:
    name: wheel,acme,requests,virtualenv,urllib3
    state: latest

- name: install latest docker-compose
  pip:
    name: docker-compose
    state: latest
  when: compose_check.stdout.find(compose_latest) == -1
