---
- name: Setup debian
  block:
    - name: install additional python packages
      pip:
        name: "{{ item.name }}"
        version: "{{ (item | default({})).version | default(omit) "
      loop: "{{ required_pip }}"

    - name: verify gpg key installed
      shell: apt-key list
      ignore_errors: yes
      changed_when: no
      no_log: yes
      register: apt_key_check

    - name: update gpg key for docker repo
      shell: "curl -fsSL {{ docker_apt_gpg_key_url }} | sudo apt-key add -"
      ignore_errors: yes
      become: yes
      when: apt_key_check.stdout.find("Docker Release (CE deb)") == -1

    - name: add docker repo (amd64)
      apt_repository:
        repo: "{{ docker_apt_repo }}"
        filename: docker
        state: present
      when: ansible_architecture == "x86_64"

    - name: add docker repo (armhf)
      apt_repository:
        repo: "{{ docker_apt_arm_repo }}"
        filename: docker
        state: present
      when: ansible_architecture == "armv7l"

    - name: create apt pin
      copy:
        dest: "{{ item.file }}"
        content: |
          Package: {{ item.package }}
          Pin: {{ item.pin }}
          Pin-Priority: {{ item.pin_priority }}
        mode: 0444
        owner: root
        group: root
      loop: "{{ docker_apt_pin }}"

    - name: run apt update
      apt:
        update_cache: yes
      register: apt_result
      until: apt_result is success
      retries: 3
      delay: 1
      ignore_errors: yes

    - name: retry if needed using command apt-get update
      command: apt-get update
      when: apt_result is failed

    - name: install docker
      apt:
        name: "docker-ce={{ docker_debian_version }}"
        update_cache: yes
        state: present
        force: yes
        cache_valid_time: "{{ apt_cache_valid_time }}"

    - name: create filesystem paths
      file:
        path: "{{ docker_daemon_config_file | dirname }}"
        owner: root
        group: root
        state: directory

    - name: create daemon config
      template:
        src: daemon.json.j2
        dest: "{{ docker_daemon_config_file }}"
        mode: 0644
        owner: root
        group: root
      notify:
        - restart docker

    - name: install python packages
      pip:
        name:
          - docker-compose
          - docker
          - uptime
  when: ansible_os_family == "Debian"
